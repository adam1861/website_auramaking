generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  passwordHash String
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  orders       Order[]
  addresses    Address[]
}

enum Role {
  USER
  ADMIN
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products    Product[]
}

model Product {
  id                String   @id @default(cuid())
  name              String
  slug              String   @unique
  description       String?
  price             Int      // price in santimat (MAD cents)
  cost              Int?
  sku               String?
  barcode           String?
  material          String?
  color             String?
  scale             String?
  stock             Int      @default(0)
  backgroundImageUrl String? // background image for product page
  isActive          Boolean  @default(true)
  isFeatured        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  images     ProductImage[]
  variants   ProductVariant[]
  movements  InventoryMovement[]
  orderItems OrderItem[]
  cartItems  CartItem[]
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model InventoryMovement {
  id        String   @id @default(cuid())
  productId String
  delta     Int
  reason    String
  userId    String?
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id            String   @id @default(cuid())
  productId     String
  name          String
  sku           String?
  priceOverride Int?     // if null, use product.price
  stock         Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  orderItems OrderItem[]

  @@unique([productId, name])
}

model Cart {
  id     String     @id @default(cuid())
  userId String?
  items  CartItem[]
  orders Order[]
}

model CartItem {
  id         String  @id @default(cuid())
  cartId     String
  productId  String
  variantId  String?
  quantity   Int
  priceAtAdd Int

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id])
}

model Order {
  id                String   @id @default(cuid())
  userId            String?
  email             String
  status            OrderStatus @default(PENDING)
  subtotal          Int
  discountTotal     Int @default(0)
  taxTotal          Int @default(0)
  shippingTotal     Int @default(0)
  grandTotal        Int
  provider          String
  providerOrderId   String?
  providerCaptureId String?
  currency          String @default("MAD")
  createdAt         DateTime @default(now())
  cartId            String?   @unique

  user      User?       @relation(fields: [userId], references: [id])
  cart      Cart?       @relation(fields: [cartId], references: [id])
  items     OrderItem[]
  discounts AppliedDiscount[]
  addresses Address[]
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  variantId  String?
  name       String
  variantName String?
  unitPrice  Int
  quantity   Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model Address {
  id          String   @id @default(cuid())
  orderId     String?
  userId      String?
  type        AddressType
  firstName   String
  lastName    String
  line1       String
  line2       String?
  city        String
  state       String?
  postalCode  String
  country     String
  phone       String?

  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [userId], references: [id])
}

enum AddressType {
  SHIPPING
  BILLING
}

model Discount {
  id            String   @id @default(cuid())
  code          String   @unique
  type          DiscountType
  value         Int
  startsAt      DateTime?
  endsAt        DateTime?
  usageLimit    Int?
  perUserLimit  Int?
  isActive      Boolean  @default(true)

  applied AppliedDiscount[]
}

enum DiscountType {
  PERCENT
  FIXED
}

model AppliedDiscount {
  id         String  @id @default(cuid())
  orderId    String
  discountId String
  amount     Int

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  discount Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
}

model WebhookEvent {
  id         String   @id @default(cuid())
  provider   String
  eventId    String   @unique
  type       String
  payload    Json
  processedAt DateTime?
}
